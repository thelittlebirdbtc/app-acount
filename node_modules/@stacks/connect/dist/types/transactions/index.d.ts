import { MethodParams, MethodResult } from '../methods';
import { StacksProvider } from '../types';
import { ContractCallOptions, ContractCallRegularOptions, ContractCallSponsoredOptions, ContractDeployOptions, FinishedTxData, SignTransactionFinishedTxData, SignTransactionOptions, SponsoredFinishedTxData, STXTransferOptions, STXTransferRegularOptions, STXTransferSponsoredOptions, TransactionOptions } from '../types/transactions';
import { UserSession } from '../auth';
/** @deprecated Update to the latest `request` RPC methods. It's not recommended to use the UserSession. */
export declare const getUserSession: (_userSession?: UserSession) => UserSession;
/** @deprecated Update to the latest `request` RPC methods. It's not recommended to use the UserSession. */
export declare function hasAppPrivateKey(userSession?: UserSession): string | false;
/** @deprecated No-op. Update to the latest `request` RPC methods. */
export declare const getKeys: (_userSession?: UserSession) => void;
/** @deprecated Update to the latest `request` RPC methods. It's not recommended to use the UserSession. */
export declare function getStxAddress(options: TransactionOptions): string;
/** @deprecated No-op. Tokens are not needed for latest RPC endpoints. */
export declare const makeContractCallToken: (_options: ContractCallOptions) => Promise<void>;
/** @deprecated No-op. Tokens are not needed for latest RPC endpoints. */
export declare const makeContractDeployToken: (_options: ContractDeployOptions) => Promise<void>;
/** @deprecated No-op. Tokens are not needed for latest RPC endpoints. */
export declare const makeSTXTransferToken: (_options: STXTransferOptions) => Promise<void>;
/** @deprecated No-op. Tokens are not needed for latest RPC endpoints. */
export declare const makeSignTransaction: (_options: SignTransactionOptions) => Promise<void>;
declare const METHOD_CALL_CONTRACT: "stx_callContract";
/** @internal */
export declare const LEGACY_CALL_CONTRACT_OPTIONS_MAP: (options: ContractCallOptions) => MethodParams<typeof METHOD_CALL_CONTRACT>;
/** @internal */
export declare const LEGACY_CALL_CONTRACT_RESPONSE_MAP: (response: MethodResult<typeof METHOD_CALL_CONTRACT>) => FinishedTxData | SponsoredFinishedTxData;
/** Compatible interface with previous Connect `openContractCall` version, but using new SIP-030 RPC method. */
export declare function openContractCall(options: ContractCallOptions | ContractCallRegularOptions | ContractCallSponsoredOptions, provider?: StacksProvider): void;
declare const METHOD_DEPLOY_CONTRACT: "stx_deployContract";
/** @internal */
export declare const LEGACY_DEPLOY_CONTRACT_OPTIONS_MAP: (options: ContractDeployOptions) => MethodParams<typeof METHOD_DEPLOY_CONTRACT>;
/** @internal */
export declare const LEGACY_DEPLOY_CONTRACT_RESPONSE_MAP: (response: MethodResult<typeof METHOD_DEPLOY_CONTRACT>) => FinishedTxData | SponsoredFinishedTxData;
/** Compatible interface with previous Connect `openContractDeploy` version, but using new SIP-030 RPC method. */
export declare function openContractDeploy(options: ContractDeployOptions, provider?: StacksProvider): void;
declare const METHOD_TRANSFER_STX: "stx_transferStx";
/** @internal */
export declare const LEGACY_TRANSFER_STX_OPTIONS_MAP: (options: STXTransferOptions) => MethodParams<typeof METHOD_TRANSFER_STX>;
/** @internal */
export declare const LEGACY_TRANSFER_STX_RESPONSE_MAP: (response: MethodResult<typeof METHOD_TRANSFER_STX>) => FinishedTxData | SponsoredFinishedTxData;
/** Compatible interface with previous Connect `openSTXTransfer` version, but using new SIP-030 RPC method. */
export declare function openSTXTransfer(options: STXTransferOptions | STXTransferRegularOptions | STXTransferSponsoredOptions, provider?: StacksProvider): void;
declare const METHOD_SIGN_TRANSACTION: "stx_signTransaction";
/** @internal */
export declare const LEGACY_SIGN_TRANSACTION_OPTIONS_MAP: (options: SignTransactionOptions) => MethodParams<typeof METHOD_SIGN_TRANSACTION>;
/** @internal */
export declare const LEGACY_SIGN_TRANSACTION_RESPONSE_MAP: (response: MethodResult<typeof METHOD_SIGN_TRANSACTION>) => SignTransactionFinishedTxData;
/** Compatible interface with previous Connect `openSignTransaction` version, but using new SIP-030 RPC method. */
export declare function openSignTransaction(options: SignTransactionOptions, provider?: StacksProvider): void;
export {};
