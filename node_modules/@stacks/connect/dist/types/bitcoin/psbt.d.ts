import { MethodParams, MethodResult } from '../methods';
import { StacksProvider } from '../types';
import { PsbtData, PsbtRequestOptions } from '../types/bitcoin';
/** @deprecated No-op. Tokens are not needed for latest RPC endpoints. */
export declare function getDefaultPsbtRequestOptions(_options: PsbtRequestOptions): void;
/** @deprecated No-op. Tokens are not needed for latest RPC endpoints. */
export declare const makePsbtToken: (_options: PsbtRequestOptions) => Promise<void>;
declare const METHOD: "signPsbt";
/** @internal */
export declare const LEGACY_SIGN_PSBT_OPTIONS_MAP: (options: PsbtRequestOptions) => MethodParams<typeof METHOD>;
/** @internal */
export declare const LEGACY_SIGN_PSBT_RESPONSE_MAP: (response: MethodResult<typeof METHOD>) => PsbtData;
/**
 * @experimental
 * Compatible interface with previous Connect `openPsbtRequestPopup` version, but using new SIP-030 RPC method.
 */
export declare function openPsbtRequestPopup(options: PsbtRequestOptions, provider?: StacksProvider): void;
export {};
