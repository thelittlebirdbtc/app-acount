import { StacksProvider } from './types';
/** A wrapper for selecting a wallet (if none is selected) and then calling the {@link authenticate} action. */
export declare const showConnect: (authOptions: import("./types").AuthOptions, provider?: StacksProvider) => Promise<void>;
/** A wrapper for selecting a wallet (if none is selected) and then calling the {@link openSTXTransfer} action. */
export declare const showSTXTransfer: (options: import("./types").STXTransferOptions, provider?: StacksProvider) => void;
/** A wrapper for selecting a wallet (if none is selected) and then calling the {@link openContractCall} action. */
export declare const showContractCall: (options: import("./types").ContractCallOptions, provider?: StacksProvider) => void;
/** A wrapper for selecting a wallet (if none is selected) and then calling the {@link openContractDeploy} action. */
export declare const showContractDeploy: (options: import("./types").ContractDeployOptions, provider?: StacksProvider) => void;
/** A wrapper for selecting a wallet (if none is selected) and then calling the {@link openSignTransaction} action. */
export declare const showSignTransaction: (options: import("./types").SignTransactionOptionBase, provider?: StacksProvider) => void;
/** A wrapper for selecting a wallet (if none is selected) and then calling the {@link openProfileUpdateRequestPopup} action. */
export declare const showProfileUpdate: (options: import("./types").ProfileUpdateRequestOptions, provider?: StacksProvider) => void;
/** A wrapper for selecting a wallet (if none is selected) and then calling the {@link openSignatureRequestPopup} action. */
export declare const showSignMessage: (options: import("./types").SignatureRequestOptions, provider?: StacksProvider) => void;
/** A wrapper for selecting a wallet (if none is selected) and then calling the {@link openStructuredDataSignatureRequestPopup} action. */
export declare const showSignStructuredMessage: (options: import("./types").StructuredDataSignatureRequestOptions, provider?: StacksProvider) => void;
export { getProvider as getSelectedProvider, isProviderSelected } from '@stacks/connect-ui';
/**
 * @deprecated Use the renamed {@link showConnect} method
 */
export declare const showBlockstackConnect: (authOptions: import("./types").AuthOptions, provider?: StacksProvider) => Promise<void>;
