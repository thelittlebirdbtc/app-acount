import { STACKS_MAINNET, clientFromNetwork, networkFrom, } from '@stacks/network';
import { c32address } from 'c32check';
import { createMultiSigSpendingCondition, createSingleSigSpendingCondition, createSponsoredAuth, createStandardAuth, isSingleSig, } from './authorization';
import { AddressHashMode, ClarityVersion, PayloadType, PostConditionMode, } from './constants';
import { validateContractCall } from './contract-abi';
import { fetchAbi, fetchFeeEstimate, fetchNonce } from './fetch';
import { createStacksPublicKey, privateKeyToHex, privateKeyToPublic, publicKeyToAddress, publicKeyToHex, } from './keys';
import { postConditionModeFrom, postConditionToWire } from './postcondition';
import { TransactionSigner } from './signer';
import { StacksTransactionWire, deriveNetworkFromTx } from './transaction';
import { omit } from './utils';
import { addressFromPublicKeys, createAddress, createContractCallPayload, createLPList, createSmartContractPayload, createTokenTransferPayload, deserializePostConditionWire, } from './wire';
export async function makeUnsignedSTXTokenTransfer(txOptions) {
    const defaultOptions = {
        fee: BigInt(0),
        nonce: BigInt(0),
        network: STACKS_MAINNET,
        memo: '',
        sponsored: false,
    };
    const options = Object.assign(defaultOptions, txOptions);
    options.network = networkFrom(options.network);
    options.client = Object.assign({}, clientFromNetwork(options.network), txOptions.client);
    const payload = createTokenTransferPayload(options.recipient, options.amount, options.memo);
    let spendingCondition = null;
    if ('publicKey' in options) {
        spendingCondition = createSingleSigSpendingCondition(AddressHashMode.P2PKH, options.publicKey, options.nonce, options.fee);
    }
    else {
        const hashMode = options.useNonSequentialMultiSig
            ? AddressHashMode.P2SHNonSequential
            : AddressHashMode.P2SH;
        const publicKeys = options.address
            ? sortPublicKeysForAddress(options.publicKeys.map(publicKeyToHex), options.numSignatures, hashMode, createAddress(options.address).hash160)
            : options.publicKeys.map(publicKeyToHex);
        spendingCondition = createMultiSigSpendingCondition(hashMode, options.numSignatures, publicKeys, options.nonce, options.fee);
    }
    const authorization = options.sponsored
        ? createSponsoredAuth(spendingCondition)
        : createStandardAuth(spendingCondition);
    const transaction = new StacksTransactionWire({
        transactionVersion: options.network.transactionVersion,
        chainId: options.network.chainId,
        auth: authorization,
        payload,
    });
    if (txOptions.fee == null) {
        const fee = await fetchFeeEstimate({ transaction, ...options });
        transaction.setFee(fee);
    }
    if (txOptions.nonce == null) {
        const addressVersion = options.network.addressVersion.singleSig;
        const address = c32address(addressVersion, transaction.auth.spendingCondition.signer);
        const txNonce = await fetchNonce({ address, ...options });
        transaction.setNonce(txNonce);
    }
    return transaction;
}
export async function makeSTXTokenTransfer(txOptions) {
    if ('senderKey' in txOptions) {
        const publicKey = privateKeyToPublic(txOptions.senderKey);
        const options = omit(txOptions, 'senderKey');
        const transaction = await makeUnsignedSTXTokenTransfer({ publicKey, ...options });
        const privKey = txOptions.senderKey;
        const signer = new TransactionSigner(transaction);
        signer.signOrigin(privKey);
        return transaction;
    }
    else {
        const options = omit(txOptions, 'signerKeys');
        const transaction = await makeUnsignedSTXTokenTransfer(options);
        mutatingSignAppendMultiSig(transaction, txOptions.publicKeys.map(publicKeyToHex).slice(), txOptions.signerKeys.map(privateKeyToHex), txOptions.address);
        return transaction;
    }
}
export async function makeContractDeploy(txOptions) {
    if ('senderKey' in txOptions) {
        const publicKey = privateKeyToPublic(txOptions.senderKey);
        const options = omit(txOptions, 'senderKey');
        const transaction = await makeUnsignedContractDeploy({ publicKey, ...options });
        const privKey = txOptions.senderKey;
        const signer = new TransactionSigner(transaction);
        signer.signOrigin(privKey);
        return transaction;
    }
    else {
        const options = omit(txOptions, 'signerKeys');
        const transaction = await makeUnsignedContractDeploy(options);
        mutatingSignAppendMultiSig(transaction, txOptions.publicKeys.map(publicKeyToHex).slice(), txOptions.signerKeys.map(privateKeyToHex), txOptions.address);
        return transaction;
    }
}
export async function makeUnsignedContractDeploy(txOptions) {
    const defaultOptions = {
        fee: BigInt(0),
        nonce: BigInt(0),
        network: STACKS_MAINNET,
        postConditionMode: PostConditionMode.Deny,
        sponsored: false,
        clarityVersion: ClarityVersion.Clarity3,
    };
    const options = Object.assign(defaultOptions, txOptions);
    options.network = networkFrom(options.network);
    options.client = Object.assign({}, clientFromNetwork(options.network), txOptions.client);
    options.postConditionMode = postConditionModeFrom(options.postConditionMode);
    const payload = createSmartContractPayload(options.contractName, options.codeBody, options.clarityVersion);
    let spendingCondition = null;
    if ('publicKey' in options) {
        spendingCondition = createSingleSigSpendingCondition(AddressHashMode.P2PKH, options.publicKey, options.nonce, options.fee);
    }
    else {
        const hashMode = options.useNonSequentialMultiSig
            ? AddressHashMode.P2SHNonSequential
            : AddressHashMode.P2SH;
        const publicKeys = options.address
            ? sortPublicKeysForAddress(options.publicKeys.map(publicKeyToHex), options.numSignatures, hashMode, createAddress(options.address).hash160)
            : options.publicKeys.map(publicKeyToHex);
        spendingCondition = createMultiSigSpendingCondition(hashMode, options.numSignatures, publicKeys, options.nonce, options.fee);
    }
    const authorization = options.sponsored
        ? createSponsoredAuth(spendingCondition)
        : createStandardAuth(spendingCondition);
    const postConditions = (options.postConditions ?? []).map(pc => {
        if (typeof pc === 'string')
            return deserializePostConditionWire(pc);
        if (typeof pc.type === 'string')
            return postConditionToWire(pc);
        return pc;
    });
    const lpPostConditions = createLPList(postConditions);
    const transaction = new StacksTransactionWire({
        transactionVersion: options.network.transactionVersion,
        chainId: options.network.chainId,
        auth: authorization,
        payload,
        postConditions: lpPostConditions,
        postConditionMode: options.postConditionMode,
    });
    if (txOptions.fee === undefined || txOptions.fee === null) {
        const fee = await fetchFeeEstimate({ transaction, ...options });
        transaction.setFee(fee);
    }
    if (txOptions.nonce === undefined || txOptions.nonce === null) {
        const addressVersion = options.network.addressVersion.singleSig;
        const address = c32address(addressVersion, transaction.auth.spendingCondition.signer);
        const txNonce = await fetchNonce({ address, ...options });
        transaction.setNonce(txNonce);
    }
    return transaction;
}
export async function makeUnsignedContractCall(txOptions) {
    const defaultOptions = {
        fee: BigInt(0),
        nonce: BigInt(0),
        network: STACKS_MAINNET,
        postConditionMode: PostConditionMode.Deny,
        sponsored: false,
    };
    const options = Object.assign(defaultOptions, txOptions);
    options.network = networkFrom(options.network);
    options.client = Object.assign({}, clientFromNetwork(options.network), options.client);
    options.postConditionMode = postConditionModeFrom(options.postConditionMode);
    const payload = createContractCallPayload(options.contractAddress, options.contractName, options.functionName, options.functionArgs);
    if (options?.validateWithAbi) {
        let abi;
        if (typeof options.validateWithAbi === 'boolean') {
            if (options?.network) {
                abi = await fetchAbi({ ...options });
            }
            else {
                throw new Error('Network option must be provided in order to validate with ABI');
            }
        }
        else {
            abi = options.validateWithAbi;
        }
        validateContractCall(payload, abi);
    }
    let spendingCondition = null;
    if ('publicKey' in options) {
        spendingCondition = createSingleSigSpendingCondition(AddressHashMode.P2PKH, options.publicKey, options.nonce, options.fee);
    }
    else {
        const hashMode = options.useNonSequentialMultiSig
            ? AddressHashMode.P2SHNonSequential
            : AddressHashMode.P2SH;
        const publicKeys = options.address
            ? sortPublicKeysForAddress(options.publicKeys.map(publicKeyToHex), options.numSignatures, hashMode, createAddress(options.address).hash160)
            : options.publicKeys.map(publicKeyToHex);
        spendingCondition = createMultiSigSpendingCondition(hashMode, options.numSignatures, publicKeys, options.nonce, options.fee);
    }
    const authorization = options.sponsored
        ? createSponsoredAuth(spendingCondition)
        : createStandardAuth(spendingCondition);
    const postConditions = (options.postConditions ?? []).map(pc => {
        if (typeof pc === 'string')
            return deserializePostConditionWire(pc);
        if (typeof pc.type === 'string')
            return postConditionToWire(pc);
        return pc;
    });
    const lpPostConditions = createLPList(postConditions);
    const transaction = new StacksTransactionWire({
        transactionVersion: options.network.transactionVersion,
        chainId: options.network.chainId,
        auth: authorization,
        payload,
        postConditions: lpPostConditions,
        postConditionMode: options.postConditionMode,
    });
    if (txOptions.fee === undefined || txOptions.fee === null) {
        const fee = await fetchFeeEstimate({ transaction, ...options });
        transaction.setFee(fee);
    }
    if (txOptions.nonce === undefined || txOptions.nonce === null) {
        const addressVersion = options.network.addressVersion.singleSig;
        const address = c32address(addressVersion, transaction.auth.spendingCondition.signer);
        const txNonce = await fetchNonce({ address, ...options });
        transaction.setNonce(txNonce);
    }
    return transaction;
}
export async function makeContractCall(txOptions) {
    if ('senderKey' in txOptions) {
        const publicKey = privateKeyToPublic(txOptions.senderKey);
        const options = omit(txOptions, 'senderKey');
        const transaction = await makeUnsignedContractCall({ publicKey, ...options });
        const privKey = txOptions.senderKey;
        const signer = new TransactionSigner(transaction);
        signer.signOrigin(privKey);
        return transaction;
    }
    else {
        const options = omit(txOptions, 'signerKeys');
        const transaction = await makeUnsignedContractCall(options);
        mutatingSignAppendMultiSig(transaction, txOptions.publicKeys.map(publicKeyToHex).slice(), txOptions.signerKeys.map(privateKeyToHex), txOptions.address);
        return transaction;
    }
}
export async function sponsorTransaction(sponsorOptions) {
    const defaultOptions = {
        fee: 0,
        sponsorNonce: 0,
        sponsorAddressHashmode: AddressHashMode.P2PKH,
        network: deriveNetworkFromTx(sponsorOptions.transaction),
    };
    const options = Object.assign(defaultOptions, sponsorOptions);
    options.network = networkFrom(options.network);
    options.client = Object.assign({}, clientFromNetwork(options.network), options.client);
    const sponsorPubKey = privateKeyToPublic(options.sponsorPrivateKey);
    if (sponsorOptions.fee == null) {
        let txFee = 0;
        switch (options.transaction.payload.payloadType) {
            case PayloadType.TokenTransfer:
            case PayloadType.SmartContract:
            case PayloadType.VersionedSmartContract:
            case PayloadType.ContractCall:
                txFee = BigInt(await fetchFeeEstimate({ ...options }));
                break;
            default:
                throw new Error(`Sponsored transactions not supported for transaction type ${PayloadType[options.transaction.payload.payloadType]}`);
        }
        options.transaction.setFee(txFee);
        options.fee = txFee;
    }
    if (sponsorOptions.sponsorNonce == null) {
        const addressVersion = options.network.addressVersion.singleSig;
        const address = publicKeyToAddress(addressVersion, sponsorPubKey);
        const sponsorNonce = await fetchNonce({ address, ...options });
        options.sponsorNonce = sponsorNonce;
    }
    const sponsorSpendingCondition = createSingleSigSpendingCondition(options.sponsorAddressHashmode, sponsorPubKey, options.sponsorNonce, options.fee);
    options.transaction.setSponsor(sponsorSpendingCondition);
    const privKey = options.sponsorPrivateKey;
    const signer = TransactionSigner.createSponsorSigner(options.transaction, sponsorSpendingCondition);
    signer.signSponsor(privKey);
    return signer.transaction;
}
function mutatingSignAppendMultiSig(transaction, publicKeys, signerKeys, address) {
    if (isSingleSig(transaction.auth.spendingCondition)) {
        throw new Error('Transaction is not a multi-sig transaction');
    }
    const signer = new TransactionSigner(transaction);
    const pubs = address
        ? sortPublicKeysForAddress(publicKeys, transaction.auth.spendingCondition.signaturesRequired, transaction.auth.spendingCondition.hashMode, createAddress(address).hash160)
        : publicKeys;
    for (const publicKey of pubs) {
        const signerKey = signerKeys.find(key => privateKeyToPublic(key) === publicKey);
        if (signerKey) {
            signer.signOrigin(signerKey);
        }
        else {
            signer.appendOrigin(publicKey);
        }
    }
}
function sortPublicKeysForAddress(publicKeys, numSigs, hashMode, hash) {
    const hashUnsorted = addressFromPublicKeys(0, hashMode, numSigs, publicKeys.map(createStacksPublicKey)).hash160;
    if (hashUnsorted === hash)
        return publicKeys;
    const publicKeysSorted = publicKeys.slice().sort();
    const hashSorted = addressFromPublicKeys(0, hashMode, numSigs, publicKeysSorted.map(createStacksPublicKey)).hash160;
    if (hashSorted === hash)
        return publicKeysSorted;
    throw new Error('Failed to find matching multi-sig address given public-keys.');
}
//# sourceMappingURL=builders.js.map