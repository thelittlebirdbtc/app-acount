import { IntegerType } from '@stacks/common';
import { ClarityValue, OptionalCV, PrincipalCV } from '../clarity';
import { ClarityVersion, PubKeyEncoding, TenureChangeCause } from '../constants';
import { AddressWire, AssetWire, CoinbasePayloadToAltRecipient, CoinbasePayloadWire, ContractCallPayload, ContractPrincipalWire, LengthPrefixedList, LengthPrefixedStringWire, MemoStringWire, MessageSignatureWire, NakamotoCoinbasePayloadWire, PoisonPayloadWire, SmartContractPayloadWire, StacksWire, StandardPrincipalWire, TenureChangePayloadWire, TokenTransferPayloadWire, TransactionAuthFieldContentsWire, TransactionAuthFieldWire, VersionedSmartContractPayloadWire } from './types';
export declare function createEmptyAddress(): AddressWire;
export declare function createMemoString(content: string): MemoStringWire;
export declare function createLPList<T extends StacksWire>(values: T[], lengthPrefixBytes?: number): LengthPrefixedList<T>;
export declare function createMessageSignature(signature: string): MessageSignatureWire;
export declare function createTokenTransferPayload(recipient: string | PrincipalCV, amount: IntegerType, memo?: string | MemoStringWire): TokenTransferPayloadWire;
export declare function createContractCallPayload(contractAddress: string | AddressWire, contractName: string | LengthPrefixedStringWire, functionName: string | LengthPrefixedStringWire, functionArgs: ClarityValue[]): ContractCallPayload;
export declare function codeBodyString(content: string): LengthPrefixedStringWire;
export declare function createSmartContractPayload(contractName: string | LengthPrefixedStringWire, codeBody: string | LengthPrefixedStringWire, clarityVersion?: ClarityVersion): SmartContractPayloadWire | VersionedSmartContractPayloadWire;
export declare function createPoisonPayload(): PoisonPayloadWire;
export declare function createCoinbasePayload(coinbaseBytes: Uint8Array, altRecipient?: PrincipalCV): CoinbasePayloadWire | CoinbasePayloadToAltRecipient;
export declare function createNakamotoCoinbasePayload(coinbaseBytes: Uint8Array, recipient: OptionalCV<PrincipalCV>, vrfProof: Uint8Array): NakamotoCoinbasePayloadWire;
export declare function createTenureChangePayload(tenureHash: string, previousTenureHash: string, burnViewHash: string, previousTenureEnd: string, previousTenureBlocks: number, cause: TenureChangeCause, publicKeyHash: string): TenureChangePayloadWire;
export declare function createLPString(content: string): LengthPrefixedStringWire;
export declare function createLPString(content: string, lengthPrefixBytes: number): LengthPrefixedStringWire;
export declare function createLPString(content: string, lengthPrefixBytes: number, maxLengthBytes: number): LengthPrefixedStringWire;
export declare function createAsset(addressString: string, contractName: string, assetName: string): AssetWire;
export declare function createAddress(c32AddressString: string): AddressWire;
export declare function createContractPrincipal(addressString: string, contractName: string): ContractPrincipalWire;
export declare function createStandardPrincipal(addressString: string): StandardPrincipalWire;
export declare function createTransactionAuthField(pubKeyEncoding: PubKeyEncoding, contents: TransactionAuthFieldContentsWire): TransactionAuthFieldWire;
