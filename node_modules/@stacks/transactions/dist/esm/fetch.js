import { bytesToHex, validateHash256, with0x } from '@stacks/common';
import { clientFromNetwork, networkFrom } from '@stacks/network';
import { deserializeCV, serializeCV } from './clarity';
import { NoEstimateAvailableError } from './errors';
import { deriveNetworkFromTx, estimateTransactionByteLength, } from './transaction';
import { cvToHex, parseReadOnlyResponse } from './utils';
import { serializePayloadBytes } from './wire';
export const BROADCAST_PATH = '/v2/transactions';
export const TRANSFER_FEE_ESTIMATE_PATH = '/v2/fees/transfer';
export const TRANSACTION_FEE_ESTIMATE_PATH = '/v2/fees/transaction';
export const ACCOUNT_PATH = '/v2/accounts';
export const CONTRACT_ABI_PATH = '/v2/contracts/interface';
export const READONLY_FUNCTION_CALL_PATH = '/v2/contracts/call-read';
export const MAP_ENTRY_PATH = '/v2/map_entry';
export async function broadcastTransaction({ transaction: txOpt, attachment: attachOpt, network: _network, client: _client, }) {
    const tx = txOpt.serialize();
    const attachment = attachOpt
        ? typeof attachOpt === 'string'
            ? attachOpt
            : bytesToHex(attachOpt)
        : undefined;
    const json = attachOpt ? { tx, attachment } : { tx };
    const options = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(json),
    };
    const network = _network ?? deriveNetworkFromTx(txOpt);
    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);
    const url = `${client.baseUrl}${BROADCAST_PATH}`;
    const response = await client.fetch(url, options);
    if (!response.ok) {
        try {
            return (await response.json());
        }
        catch (e) {
            throw Error('Failed to broadcast transaction (unable to parse node response).', { cause: e });
        }
    }
    const text = await response.text();
    const txid = text.replace(/["]+/g, '');
    if (!validateHash256(txid))
        throw new Error(text);
    return { txid };
}
async function _getNonceApi({ address, network = 'mainnet', client: _client, }) {
    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);
    const url = `${client.baseUrl}/extended/v1/address/${address}/nonces`;
    const response = await client.fetch(url);
    const result = await response.json();
    return BigInt(result.possible_next_nonce);
}
export async function fetchNonce(opts) {
    try {
        return await _getNonceApi(opts);
    }
    catch (e) { }
    const network = networkFrom(opts.network ?? 'mainnet');
    const client = Object.assign({}, clientFromNetwork(network), opts.client);
    const url = `${client.baseUrl}${ACCOUNT_PATH}/${opts.address}?proof=0`;
    const response = await client.fetch(url);
    if (!response.ok) {
        const msg = await response.text().catch(() => '');
        throw new Error(`Error fetching nonce. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: "${msg}"`);
    }
    const json = (await response.json());
    return BigInt(json.nonce);
}
export async function fetchFeeEstimateTransfer({ transaction: txOpt, network: _network, client: _client, }) {
    const network = typeof txOpt === 'number' ? 'mainnet' : _network ?? deriveNetworkFromTx(txOpt);
    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);
    const url = `${client.baseUrl}${TRANSFER_FEE_ESTIMATE_PATH}`;
    const response = await client.fetch(url, {
        headers: { Accept: 'application/text' },
    });
    if (!response.ok) {
        const msg = await response.text().catch(() => '');
        throw new Error(`Error estimating transfer fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: "${msg}"`);
    }
    const feeRateResult = await response.text();
    const txBytes = typeof txOpt === 'number'
        ? BigInt(txOpt)
        : BigInt(Math.ceil(txOpt.serializeBytes().byteLength));
    const feeRate = BigInt(feeRateResult);
    return feeRate * txBytes;
}
export async function fetchFeeEstimateTransaction({ payload, estimatedLength, network = 'mainnet', client: _client, }) {
    const json = {
        transaction_payload: payload,
        estimated_len: estimatedLength,
    };
    const options = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(json),
    };
    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);
    const url = `${client.baseUrl}${TRANSACTION_FEE_ESTIMATE_PATH}`;
    const response = await client.fetch(url, options);
    if (!response.ok) {
        const body = await response.text().catch(() => '');
        if (body.includes('NoEstimateAvailable')) {
            let json = {};
            try {
                json = JSON.parse(body);
            }
            catch (err) {
            }
            throw new NoEstimateAvailableError(json?.reason_data?.message ?? '');
        }
        throw new Error(`Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: "${body}"`);
    }
    const data = await response.json();
    return data.estimations;
}
export async function fetchFeeEstimate({ transaction: txOpt, network: _network, client: _client, }) {
    const network = _network ?? deriveNetworkFromTx(txOpt);
    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);
    try {
        const estimatedLength = estimateTransactionByteLength(txOpt);
        return (await fetchFeeEstimateTransaction({
            payload: bytesToHex(serializePayloadBytes(txOpt.payload)),
            estimatedLength,
            network,
            client,
        }))[1].fee;
    }
    catch (error) {
        if (!(error instanceof NoEstimateAvailableError))
            throw error;
        return await fetchFeeEstimateTransfer({ transaction: txOpt, network });
    }
}
export async function fetchAbi({ contractAddress: address, contractName: name, network = 'mainnet', client: _client, }) {
    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);
    const url = `${client.baseUrl}${CONTRACT_ABI_PATH}/${address}/${name}`;
    const response = await client.fetch(url);
    if (!response.ok) {
        const msg = await response.text().catch(() => '');
        throw new Error(`Error fetching contract ABI for contract "${name}" at address ${address}. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: "${msg}"`);
    }
    return JSON.parse(await response.text());
}
export async function fetchCallReadOnlyFunction({ contractName, contractAddress, functionName, functionArgs, senderAddress, network = 'mainnet', client: _client, }) {
    const json = {
        sender: senderAddress,
        arguments: functionArgs.map(arg => cvToHex(arg)),
    };
    const options = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(json),
    };
    const name = encodeURIComponent(functionName);
    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);
    const url = `${client.baseUrl}${READONLY_FUNCTION_CALL_PATH}/${contractAddress}/${contractName}/${name}`;
    const response = await client.fetch(url, options);
    if (!response.ok) {
        const msg = await response.text().catch(() => '');
        throw new Error(`Error calling read-only function. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: "${msg}"`);
    }
    return await response.json().then(parseReadOnlyResponse);
}
export async function fetchContractMapEntry({ contractAddress, contractName, mapName, mapKey, network = 'mainnet', client: _client, }) {
    const keyHex = with0x(serializeCV(mapKey));
    const options = {
        method: 'POST',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(keyHex),
    };
    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);
    const url = `${client.baseUrl}${MAP_ENTRY_PATH}/${contractAddress}/${contractName}/${mapName}?proof=0`;
    const response = await client.fetch(url, options);
    if (!response.ok) {
        const msg = await response.text().catch(() => '');
        throw new Error(`Error fetching map entry for map "${mapName}" in contract "${contractName}" at address ${contractAddress}, using map key "${keyHex}". Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: "${msg}"`);
    }
    const json = await response.json();
    if (!json.data) {
        throw new Error(`Error fetching map entry for map "${mapName}" in contract "${contractName}" at address ${contractAddress}, using map key "${keyHex}". Response ${response.status}: ${response.statusText}. Attempted to fetch ${client.baseUrl} and failed with the response: "${JSON.stringify(json)}"`);
    }
    try {
        return deserializeCV(json.data);
    }
    catch (error) {
        throw new Error(`Error deserializing Clarity value "${json.data}": ${error}`);
    }
}
//# sourceMappingURL=fetch.js.map