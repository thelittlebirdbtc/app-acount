"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sponsorTransaction = exports.makeContractCall = exports.makeUnsignedContractCall = exports.makeUnsignedContractDeploy = exports.makeContractDeploy = exports.makeSTXTokenTransfer = exports.makeUnsignedSTXTokenTransfer = void 0;
const network_1 = require("@stacks/network");
const c32check_1 = require("c32check");
const authorization_1 = require("./authorization");
const constants_1 = require("./constants");
const contract_abi_1 = require("./contract-abi");
const fetch_1 = require("./fetch");
const keys_1 = require("./keys");
const postcondition_1 = require("./postcondition");
const signer_1 = require("./signer");
const transaction_1 = require("./transaction");
const utils_1 = require("./utils");
const wire_1 = require("./wire");
async function makeUnsignedSTXTokenTransfer(txOptions) {
    const defaultOptions = {
        fee: BigInt(0),
        nonce: BigInt(0),
        network: network_1.STACKS_MAINNET,
        memo: '',
        sponsored: false,
    };
    const options = Object.assign(defaultOptions, txOptions);
    options.network = (0, network_1.networkFrom)(options.network);
    options.client = Object.assign({}, (0, network_1.clientFromNetwork)(options.network), txOptions.client);
    const payload = (0, wire_1.createTokenTransferPayload)(options.recipient, options.amount, options.memo);
    let spendingCondition = null;
    if ('publicKey' in options) {
        spendingCondition = (0, authorization_1.createSingleSigSpendingCondition)(constants_1.AddressHashMode.P2PKH, options.publicKey, options.nonce, options.fee);
    }
    else {
        const hashMode = options.useNonSequentialMultiSig
            ? constants_1.AddressHashMode.P2SHNonSequential
            : constants_1.AddressHashMode.P2SH;
        const publicKeys = options.address
            ? sortPublicKeysForAddress(options.publicKeys.map(keys_1.publicKeyToHex), options.numSignatures, hashMode, (0, wire_1.createAddress)(options.address).hash160)
            : options.publicKeys.map(keys_1.publicKeyToHex);
        spendingCondition = (0, authorization_1.createMultiSigSpendingCondition)(hashMode, options.numSignatures, publicKeys, options.nonce, options.fee);
    }
    const authorization = options.sponsored
        ? (0, authorization_1.createSponsoredAuth)(spendingCondition)
        : (0, authorization_1.createStandardAuth)(spendingCondition);
    const transaction = new transaction_1.StacksTransactionWire({
        transactionVersion: options.network.transactionVersion,
        chainId: options.network.chainId,
        auth: authorization,
        payload,
    });
    if (txOptions.fee == null) {
        const fee = await (0, fetch_1.fetchFeeEstimate)({ transaction, ...options });
        transaction.setFee(fee);
    }
    if (txOptions.nonce == null) {
        const addressVersion = options.network.addressVersion.singleSig;
        const address = (0, c32check_1.c32address)(addressVersion, transaction.auth.spendingCondition.signer);
        const txNonce = await (0, fetch_1.fetchNonce)({ address, ...options });
        transaction.setNonce(txNonce);
    }
    return transaction;
}
exports.makeUnsignedSTXTokenTransfer = makeUnsignedSTXTokenTransfer;
async function makeSTXTokenTransfer(txOptions) {
    if ('senderKey' in txOptions) {
        const publicKey = (0, keys_1.privateKeyToPublic)(txOptions.senderKey);
        const options = (0, utils_1.omit)(txOptions, 'senderKey');
        const transaction = await makeUnsignedSTXTokenTransfer({ publicKey, ...options });
        const privKey = txOptions.senderKey;
        const signer = new signer_1.TransactionSigner(transaction);
        signer.signOrigin(privKey);
        return transaction;
    }
    else {
        const options = (0, utils_1.omit)(txOptions, 'signerKeys');
        const transaction = await makeUnsignedSTXTokenTransfer(options);
        mutatingSignAppendMultiSig(transaction, txOptions.publicKeys.map(keys_1.publicKeyToHex).slice(), txOptions.signerKeys.map(keys_1.privateKeyToHex), txOptions.address);
        return transaction;
    }
}
exports.makeSTXTokenTransfer = makeSTXTokenTransfer;
async function makeContractDeploy(txOptions) {
    if ('senderKey' in txOptions) {
        const publicKey = (0, keys_1.privateKeyToPublic)(txOptions.senderKey);
        const options = (0, utils_1.omit)(txOptions, 'senderKey');
        const transaction = await makeUnsignedContractDeploy({ publicKey, ...options });
        const privKey = txOptions.senderKey;
        const signer = new signer_1.TransactionSigner(transaction);
        signer.signOrigin(privKey);
        return transaction;
    }
    else {
        const options = (0, utils_1.omit)(txOptions, 'signerKeys');
        const transaction = await makeUnsignedContractDeploy(options);
        mutatingSignAppendMultiSig(transaction, txOptions.publicKeys.map(keys_1.publicKeyToHex).slice(), txOptions.signerKeys.map(keys_1.privateKeyToHex), txOptions.address);
        return transaction;
    }
}
exports.makeContractDeploy = makeContractDeploy;
async function makeUnsignedContractDeploy(txOptions) {
    const defaultOptions = {
        fee: BigInt(0),
        nonce: BigInt(0),
        network: network_1.STACKS_MAINNET,
        postConditionMode: constants_1.PostConditionMode.Deny,
        sponsored: false,
        clarityVersion: constants_1.ClarityVersion.Clarity3,
    };
    const options = Object.assign(defaultOptions, txOptions);
    options.network = (0, network_1.networkFrom)(options.network);
    options.client = Object.assign({}, (0, network_1.clientFromNetwork)(options.network), txOptions.client);
    options.postConditionMode = (0, postcondition_1.postConditionModeFrom)(options.postConditionMode);
    const payload = (0, wire_1.createSmartContractPayload)(options.contractName, options.codeBody, options.clarityVersion);
    let spendingCondition = null;
    if ('publicKey' in options) {
        spendingCondition = (0, authorization_1.createSingleSigSpendingCondition)(constants_1.AddressHashMode.P2PKH, options.publicKey, options.nonce, options.fee);
    }
    else {
        const hashMode = options.useNonSequentialMultiSig
            ? constants_1.AddressHashMode.P2SHNonSequential
            : constants_1.AddressHashMode.P2SH;
        const publicKeys = options.address
            ? sortPublicKeysForAddress(options.publicKeys.map(keys_1.publicKeyToHex), options.numSignatures, hashMode, (0, wire_1.createAddress)(options.address).hash160)
            : options.publicKeys.map(keys_1.publicKeyToHex);
        spendingCondition = (0, authorization_1.createMultiSigSpendingCondition)(hashMode, options.numSignatures, publicKeys, options.nonce, options.fee);
    }
    const authorization = options.sponsored
        ? (0, authorization_1.createSponsoredAuth)(spendingCondition)
        : (0, authorization_1.createStandardAuth)(spendingCondition);
    const postConditions = (options.postConditions ?? []).map(pc => {
        if (typeof pc === 'string')
            return (0, wire_1.deserializePostConditionWire)(pc);
        if (typeof pc.type === 'string')
            return (0, postcondition_1.postConditionToWire)(pc);
        return pc;
    });
    const lpPostConditions = (0, wire_1.createLPList)(postConditions);
    const transaction = new transaction_1.StacksTransactionWire({
        transactionVersion: options.network.transactionVersion,
        chainId: options.network.chainId,
        auth: authorization,
        payload,
        postConditions: lpPostConditions,
        postConditionMode: options.postConditionMode,
    });
    if (txOptions.fee === undefined || txOptions.fee === null) {
        const fee = await (0, fetch_1.fetchFeeEstimate)({ transaction, ...options });
        transaction.setFee(fee);
    }
    if (txOptions.nonce === undefined || txOptions.nonce === null) {
        const addressVersion = options.network.addressVersion.singleSig;
        const address = (0, c32check_1.c32address)(addressVersion, transaction.auth.spendingCondition.signer);
        const txNonce = await (0, fetch_1.fetchNonce)({ address, ...options });
        transaction.setNonce(txNonce);
    }
    return transaction;
}
exports.makeUnsignedContractDeploy = makeUnsignedContractDeploy;
async function makeUnsignedContractCall(txOptions) {
    const defaultOptions = {
        fee: BigInt(0),
        nonce: BigInt(0),
        network: network_1.STACKS_MAINNET,
        postConditionMode: constants_1.PostConditionMode.Deny,
        sponsored: false,
    };
    const options = Object.assign(defaultOptions, txOptions);
    options.network = (0, network_1.networkFrom)(options.network);
    options.client = Object.assign({}, (0, network_1.clientFromNetwork)(options.network), options.client);
    options.postConditionMode = (0, postcondition_1.postConditionModeFrom)(options.postConditionMode);
    const payload = (0, wire_1.createContractCallPayload)(options.contractAddress, options.contractName, options.functionName, options.functionArgs);
    if (options?.validateWithAbi) {
        let abi;
        if (typeof options.validateWithAbi === 'boolean') {
            if (options?.network) {
                abi = await (0, fetch_1.fetchAbi)({ ...options });
            }
            else {
                throw new Error('Network option must be provided in order to validate with ABI');
            }
        }
        else {
            abi = options.validateWithAbi;
        }
        (0, contract_abi_1.validateContractCall)(payload, abi);
    }
    let spendingCondition = null;
    if ('publicKey' in options) {
        spendingCondition = (0, authorization_1.createSingleSigSpendingCondition)(constants_1.AddressHashMode.P2PKH, options.publicKey, options.nonce, options.fee);
    }
    else {
        const hashMode = options.useNonSequentialMultiSig
            ? constants_1.AddressHashMode.P2SHNonSequential
            : constants_1.AddressHashMode.P2SH;
        const publicKeys = options.address
            ? sortPublicKeysForAddress(options.publicKeys.map(keys_1.publicKeyToHex), options.numSignatures, hashMode, (0, wire_1.createAddress)(options.address).hash160)
            : options.publicKeys.map(keys_1.publicKeyToHex);
        spendingCondition = (0, authorization_1.createMultiSigSpendingCondition)(hashMode, options.numSignatures, publicKeys, options.nonce, options.fee);
    }
    const authorization = options.sponsored
        ? (0, authorization_1.createSponsoredAuth)(spendingCondition)
        : (0, authorization_1.createStandardAuth)(spendingCondition);
    const postConditions = (options.postConditions ?? []).map(pc => {
        if (typeof pc === 'string')
            return (0, wire_1.deserializePostConditionWire)(pc);
        if (typeof pc.type === 'string')
            return (0, postcondition_1.postConditionToWire)(pc);
        return pc;
    });
    const lpPostConditions = (0, wire_1.createLPList)(postConditions);
    const transaction = new transaction_1.StacksTransactionWire({
        transactionVersion: options.network.transactionVersion,
        chainId: options.network.chainId,
        auth: authorization,
        payload,
        postConditions: lpPostConditions,
        postConditionMode: options.postConditionMode,
    });
    if (txOptions.fee === undefined || txOptions.fee === null) {
        const fee = await (0, fetch_1.fetchFeeEstimate)({ transaction, ...options });
        transaction.setFee(fee);
    }
    if (txOptions.nonce === undefined || txOptions.nonce === null) {
        const addressVersion = options.network.addressVersion.singleSig;
        const address = (0, c32check_1.c32address)(addressVersion, transaction.auth.spendingCondition.signer);
        const txNonce = await (0, fetch_1.fetchNonce)({ address, ...options });
        transaction.setNonce(txNonce);
    }
    return transaction;
}
exports.makeUnsignedContractCall = makeUnsignedContractCall;
async function makeContractCall(txOptions) {
    if ('senderKey' in txOptions) {
        const publicKey = (0, keys_1.privateKeyToPublic)(txOptions.senderKey);
        const options = (0, utils_1.omit)(txOptions, 'senderKey');
        const transaction = await makeUnsignedContractCall({ publicKey, ...options });
        const privKey = txOptions.senderKey;
        const signer = new signer_1.TransactionSigner(transaction);
        signer.signOrigin(privKey);
        return transaction;
    }
    else {
        const options = (0, utils_1.omit)(txOptions, 'signerKeys');
        const transaction = await makeUnsignedContractCall(options);
        mutatingSignAppendMultiSig(transaction, txOptions.publicKeys.map(keys_1.publicKeyToHex).slice(), txOptions.signerKeys.map(keys_1.privateKeyToHex), txOptions.address);
        return transaction;
    }
}
exports.makeContractCall = makeContractCall;
async function sponsorTransaction(sponsorOptions) {
    const defaultOptions = {
        fee: 0,
        sponsorNonce: 0,
        sponsorAddressHashmode: constants_1.AddressHashMode.P2PKH,
        network: (0, transaction_1.deriveNetworkFromTx)(sponsorOptions.transaction),
    };
    const options = Object.assign(defaultOptions, sponsorOptions);
    options.network = (0, network_1.networkFrom)(options.network);
    options.client = Object.assign({}, (0, network_1.clientFromNetwork)(options.network), options.client);
    const sponsorPubKey = (0, keys_1.privateKeyToPublic)(options.sponsorPrivateKey);
    if (sponsorOptions.fee == null) {
        let txFee = 0;
        switch (options.transaction.payload.payloadType) {
            case constants_1.PayloadType.TokenTransfer:
            case constants_1.PayloadType.SmartContract:
            case constants_1.PayloadType.VersionedSmartContract:
            case constants_1.PayloadType.ContractCall:
                txFee = BigInt(await (0, fetch_1.fetchFeeEstimate)({ ...options }));
                break;
            default:
                throw new Error(`Sponsored transactions not supported for transaction type ${constants_1.PayloadType[options.transaction.payload.payloadType]}`);
        }
        options.transaction.setFee(txFee);
        options.fee = txFee;
    }
    if (sponsorOptions.sponsorNonce == null) {
        const addressVersion = options.network.addressVersion.singleSig;
        const address = (0, keys_1.publicKeyToAddress)(addressVersion, sponsorPubKey);
        const sponsorNonce = await (0, fetch_1.fetchNonce)({ address, ...options });
        options.sponsorNonce = sponsorNonce;
    }
    const sponsorSpendingCondition = (0, authorization_1.createSingleSigSpendingCondition)(options.sponsorAddressHashmode, sponsorPubKey, options.sponsorNonce, options.fee);
    options.transaction.setSponsor(sponsorSpendingCondition);
    const privKey = options.sponsorPrivateKey;
    const signer = signer_1.TransactionSigner.createSponsorSigner(options.transaction, sponsorSpendingCondition);
    signer.signSponsor(privKey);
    return signer.transaction;
}
exports.sponsorTransaction = sponsorTransaction;
function mutatingSignAppendMultiSig(transaction, publicKeys, signerKeys, address) {
    if ((0, authorization_1.isSingleSig)(transaction.auth.spendingCondition)) {
        throw new Error('Transaction is not a multi-sig transaction');
    }
    const signer = new signer_1.TransactionSigner(transaction);
    const pubs = address
        ? sortPublicKeysForAddress(publicKeys, transaction.auth.spendingCondition.signaturesRequired, transaction.auth.spendingCondition.hashMode, (0, wire_1.createAddress)(address).hash160)
        : publicKeys;
    for (const publicKey of pubs) {
        const signerKey = signerKeys.find(key => (0, keys_1.privateKeyToPublic)(key) === publicKey);
        if (signerKey) {
            signer.signOrigin(signerKey);
        }
        else {
            signer.appendOrigin(publicKey);
        }
    }
}
function sortPublicKeysForAddress(publicKeys, numSigs, hashMode, hash) {
    const hashUnsorted = (0, wire_1.addressFromPublicKeys)(0, hashMode, numSigs, publicKeys.map(keys_1.createStacksPublicKey)).hash160;
    if (hashUnsorted === hash)
        return publicKeys;
    const publicKeysSorted = publicKeys.slice().sort();
    const hashSorted = (0, wire_1.addressFromPublicKeys)(0, hashMode, numSigs, publicKeysSorted.map(keys_1.createStacksPublicKey)).hash160;
    if (hashSorted === hash)
        return publicKeysSorted;
    throw new Error('Failed to find matching multi-sig address given public-keys.');
}
//# sourceMappingURL=builders.js.map