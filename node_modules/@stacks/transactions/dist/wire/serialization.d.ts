import { BytesReader } from '../BytesReader';
import { AddressWire, AssetWire, LengthPrefixedList, LengthPrefixedStringWire, MemoStringWire, MessageSignatureWire, PayloadInput, PayloadWire, PostConditionPrincipalWire, PostConditionWire, PublicKeyWire, StacksWire, StacksWireType, TransactionAuthFieldWire } from './types';
export declare function serializeStacksWire(wire: StacksWire): string;
export declare function serializeStacksWireBytes(wire: StacksWire): Uint8Array;
export declare function deserializeStacksWire(bytesReader: string | Uint8Array | BytesReader, type: StacksWireType, listType?: StacksWireType): StacksWire;
export declare function serializeAddress(address: AddressWire): string;
export declare function serializeAddressBytes(address: AddressWire): Uint8Array;
export declare function deserializeAddress(serialized: string | Uint8Array | BytesReader): AddressWire;
export declare function serializePrincipal(principal: PostConditionPrincipalWire): string;
export declare function serializePrincipalBytes(principal: PostConditionPrincipalWire): Uint8Array;
export declare function deserializePrincipal(serialized: string | Uint8Array | BytesReader): PostConditionPrincipalWire;
export declare function serializeLPString(lps: LengthPrefixedStringWire): string;
export declare function serializeLPStringBytes(lps: LengthPrefixedStringWire): Uint8Array;
export declare function deserializeLPString(serialized: string | Uint8Array | BytesReader, prefixBytes?: number, maxLength?: number): LengthPrefixedStringWire;
export declare function serializeMemoString(memoString: MemoStringWire): string;
export declare function serializeMemoStringBytes(memoString: MemoStringWire): Uint8Array;
export declare function deserializeMemoString(serialized: string | Uint8Array | BytesReader): MemoStringWire;
export declare function serializeAsset(info: AssetWire): string;
export declare function serializeAssetBytes(info: AssetWire): Uint8Array;
export declare function deserializeAsset(serialized: string | Uint8Array | BytesReader): AssetWire;
export declare function serializeLPList(lpList: LengthPrefixedList): string;
export declare function serializeLPListBytes(lpList: LengthPrefixedList): Uint8Array;
export declare function deserializeLPList<TType extends StacksWireType = StacksWireType, TWire extends StacksWire = TType extends StacksWireType.Address ? AddressWire : TType extends StacksWireType.LengthPrefixedString ? LengthPrefixedStringWire : TType extends StacksWireType.MemoString ? MemoStringWire : TType extends StacksWireType.Asset ? AssetWire : TType extends StacksWireType.PostCondition ? PostConditionWire : TType extends StacksWireType.PublicKey ? PublicKeyWire : TType extends StacksWireType.TransactionAuthField ? TransactionAuthFieldWire : StacksWire>(serialized: string | Uint8Array | BytesReader, type: TType, lengthPrefixBytes?: number): LengthPrefixedList<TWire>;
export declare function serializePostConditionWire(postCondition: PostConditionWire): string;
export declare function serializePostConditionWireBytes(postCondition: PostConditionWire): Uint8Array;
export declare function deserializePostConditionWire(serialized: string | Uint8Array | BytesReader): PostConditionWire;
export declare function serializePayload(payload: PayloadInput): string;
export declare function serializePayloadBytes(payload: PayloadInput): Uint8Array;
export declare function deserializePayload(serialized: string | Uint8Array | BytesReader): PayloadWire;
export declare function deserializeMessageSignature(serialized: string | Uint8Array | BytesReader): MessageSignatureWire;
export declare function deserializeTransactionAuthField(serialized: string | Uint8Array | BytesReader): TransactionAuthFieldWire;
export declare function serializeMessageSignature(messageSignature: MessageSignatureWire): string;
export declare function serializeMessageSignatureBytes(messageSignature: MessageSignatureWire): Uint8Array;
export declare function serializeTransactionAuthField(field: TransactionAuthFieldWire): string;
export declare function serializeTransactionAuthFieldBytes(field: TransactionAuthFieldWire): Uint8Array;
export declare function serializePublicKey(key: PublicKeyWire): string;
export declare function serializePublicKeyBytes(key: PublicKeyWire): Uint8Array;
export declare function deserializePublicKey(serialized: string | Uint8Array | BytesReader): PublicKeyWire;
