"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchContractMapEntry = exports.fetchCallReadOnlyFunction = exports.fetchAbi = exports.fetchFeeEstimate = exports.fetchFeeEstimateTransaction = exports.fetchFeeEstimateTransfer = exports.fetchNonce = exports.broadcastTransaction = exports.MAP_ENTRY_PATH = exports.READONLY_FUNCTION_CALL_PATH = exports.CONTRACT_ABI_PATH = exports.ACCOUNT_PATH = exports.TRANSACTION_FEE_ESTIMATE_PATH = exports.TRANSFER_FEE_ESTIMATE_PATH = exports.BROADCAST_PATH = void 0;
const common_1 = require("@stacks/common");
const network_1 = require("@stacks/network");
const clarity_1 = require("./clarity");
const errors_1 = require("./errors");
const transaction_1 = require("./transaction");
const utils_1 = require("./utils");
const wire_1 = require("./wire");
exports.BROADCAST_PATH = '/v2/transactions';
exports.TRANSFER_FEE_ESTIMATE_PATH = '/v2/fees/transfer';
exports.TRANSACTION_FEE_ESTIMATE_PATH = '/v2/fees/transaction';
exports.ACCOUNT_PATH = '/v2/accounts';
exports.CONTRACT_ABI_PATH = '/v2/contracts/interface';
exports.READONLY_FUNCTION_CALL_PATH = '/v2/contracts/call-read';
exports.MAP_ENTRY_PATH = '/v2/map_entry';
async function broadcastTransaction({ transaction: txOpt, attachment: attachOpt, network: _network, client: _client, }) {
    const tx = txOpt.serialize();
    const attachment = attachOpt
        ? typeof attachOpt === 'string'
            ? attachOpt
            : (0, common_1.bytesToHex)(attachOpt)
        : undefined;
    const json = attachOpt ? { tx, attachment } : { tx };
    const options = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(json),
    };
    const network = _network ?? (0, transaction_1.deriveNetworkFromTx)(txOpt);
    const client = Object.assign({}, (0, network_1.clientFromNetwork)((0, network_1.networkFrom)(network)), _client);
    const url = `${client.baseUrl}${exports.BROADCAST_PATH}`;
    const response = await client.fetch(url, options);
    if (!response.ok) {
        try {
            return (await response.json());
        }
        catch (e) {
            throw Error('Failed to broadcast transaction (unable to parse node response).', { cause: e });
        }
    }
    const text = await response.text();
    const txid = text.replace(/["]+/g, '');
    if (!(0, common_1.validateHash256)(txid))
        throw new Error(text);
    return { txid };
}
exports.broadcastTransaction = broadcastTransaction;
async function _getNonceApi({ address, network = 'mainnet', client: _client, }) {
    const client = Object.assign({}, (0, network_1.clientFromNetwork)((0, network_1.networkFrom)(network)), _client);
    const url = `${client.baseUrl}/extended/v1/address/${address}/nonces`;
    const response = await client.fetch(url);
    const result = await response.json();
    return BigInt(result.possible_next_nonce);
}
async function fetchNonce(opts) {
    try {
        return await _getNonceApi(opts);
    }
    catch (e) { }
    const network = (0, network_1.networkFrom)(opts.network ?? 'mainnet');
    const client = Object.assign({}, (0, network_1.clientFromNetwork)(network), opts.client);
    const url = `${client.baseUrl}${exports.ACCOUNT_PATH}/${opts.address}?proof=0`;
    const response = await client.fetch(url);
    if (!response.ok) {
        const msg = await response.text().catch(() => '');
        throw new Error(`Error fetching nonce. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: "${msg}"`);
    }
    const json = (await response.json());
    return BigInt(json.nonce);
}
exports.fetchNonce = fetchNonce;
async function fetchFeeEstimateTransfer({ transaction: txOpt, network: _network, client: _client, }) {
    const network = typeof txOpt === 'number' ? 'mainnet' : _network ?? (0, transaction_1.deriveNetworkFromTx)(txOpt);
    const client = Object.assign({}, (0, network_1.clientFromNetwork)((0, network_1.networkFrom)(network)), _client);
    const url = `${client.baseUrl}${exports.TRANSFER_FEE_ESTIMATE_PATH}`;
    const response = await client.fetch(url, {
        headers: { Accept: 'application/text' },
    });
    if (!response.ok) {
        const msg = await response.text().catch(() => '');
        throw new Error(`Error estimating transfer fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: "${msg}"`);
    }
    const feeRateResult = await response.text();
    const txBytes = typeof txOpt === 'number'
        ? BigInt(txOpt)
        : BigInt(Math.ceil(txOpt.serializeBytes().byteLength));
    const feeRate = BigInt(feeRateResult);
    return feeRate * txBytes;
}
exports.fetchFeeEstimateTransfer = fetchFeeEstimateTransfer;
async function fetchFeeEstimateTransaction({ payload, estimatedLength, network = 'mainnet', client: _client, }) {
    const json = {
        transaction_payload: payload,
        estimated_len: estimatedLength,
    };
    const options = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(json),
    };
    const client = Object.assign({}, (0, network_1.clientFromNetwork)((0, network_1.networkFrom)(network)), _client);
    const url = `${client.baseUrl}${exports.TRANSACTION_FEE_ESTIMATE_PATH}`;
    const response = await client.fetch(url, options);
    if (!response.ok) {
        const body = await response.text().catch(() => '');
        if (body.includes('NoEstimateAvailable')) {
            let json = {};
            try {
                json = JSON.parse(body);
            }
            catch (err) {
            }
            throw new errors_1.NoEstimateAvailableError(json?.reason_data?.message ?? '');
        }
        throw new Error(`Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: "${body}"`);
    }
    const data = await response.json();
    return data.estimations;
}
exports.fetchFeeEstimateTransaction = fetchFeeEstimateTransaction;
async function fetchFeeEstimate({ transaction: txOpt, network: _network, client: _client, }) {
    const network = _network ?? (0, transaction_1.deriveNetworkFromTx)(txOpt);
    const client = Object.assign({}, (0, network_1.clientFromNetwork)((0, network_1.networkFrom)(network)), _client);
    try {
        const estimatedLength = (0, transaction_1.estimateTransactionByteLength)(txOpt);
        return (await fetchFeeEstimateTransaction({
            payload: (0, common_1.bytesToHex)((0, wire_1.serializePayloadBytes)(txOpt.payload)),
            estimatedLength,
            network,
            client,
        }))[1].fee;
    }
    catch (error) {
        if (!(error instanceof errors_1.NoEstimateAvailableError))
            throw error;
        return await fetchFeeEstimateTransfer({ transaction: txOpt, network });
    }
}
exports.fetchFeeEstimate = fetchFeeEstimate;
async function fetchAbi({ contractAddress: address, contractName: name, network = 'mainnet', client: _client, }) {
    const client = Object.assign({}, (0, network_1.clientFromNetwork)((0, network_1.networkFrom)(network)), _client);
    const url = `${client.baseUrl}${exports.CONTRACT_ABI_PATH}/${address}/${name}`;
    const response = await client.fetch(url);
    if (!response.ok) {
        const msg = await response.text().catch(() => '');
        throw new Error(`Error fetching contract ABI for contract "${name}" at address ${address}. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: "${msg}"`);
    }
    return JSON.parse(await response.text());
}
exports.fetchAbi = fetchAbi;
async function fetchCallReadOnlyFunction({ contractName, contractAddress, functionName, functionArgs, senderAddress, network = 'mainnet', client: _client, }) {
    const json = {
        sender: senderAddress,
        arguments: functionArgs.map(arg => (0, utils_1.cvToHex)(arg)),
    };
    const options = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(json),
    };
    const name = encodeURIComponent(functionName);
    const client = Object.assign({}, (0, network_1.clientFromNetwork)((0, network_1.networkFrom)(network)), _client);
    const url = `${client.baseUrl}${exports.READONLY_FUNCTION_CALL_PATH}/${contractAddress}/${contractName}/${name}`;
    const response = await client.fetch(url, options);
    if (!response.ok) {
        const msg = await response.text().catch(() => '');
        throw new Error(`Error calling read-only function. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: "${msg}"`);
    }
    return await response.json().then(utils_1.parseReadOnlyResponse);
}
exports.fetchCallReadOnlyFunction = fetchCallReadOnlyFunction;
async function fetchContractMapEntry({ contractAddress, contractName, mapName, mapKey, network = 'mainnet', client: _client, }) {
    const keyHex = (0, common_1.with0x)((0, clarity_1.serializeCV)(mapKey));
    const options = {
        method: 'POST',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(keyHex),
    };
    const client = Object.assign({}, (0, network_1.clientFromNetwork)((0, network_1.networkFrom)(network)), _client);
    const url = `${client.baseUrl}${exports.MAP_ENTRY_PATH}/${contractAddress}/${contractName}/${mapName}?proof=0`;
    const response = await client.fetch(url, options);
    if (!response.ok) {
        const msg = await response.text().catch(() => '');
        throw new Error(`Error fetching map entry for map "${mapName}" in contract "${contractName}" at address ${contractAddress}, using map key "${keyHex}". Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: "${msg}"`);
    }
    const json = await response.json();
    if (!json.data) {
        throw new Error(`Error fetching map entry for map "${mapName}" in contract "${contractName}" at address ${contractAddress}, using map key "${keyHex}". Response ${response.status}: ${response.statusText}. Attempted to fetch ${client.baseUrl} and failed with the response: "${JSON.stringify(json)}"`);
    }
    try {
        return (0, clarity_1.deserializeCV)(json.data);
    }
    catch (error) {
        throw new Error(`Error deserializing Clarity value "${json.data}": ${error}`);
    }
}
exports.fetchContractMapEntry = fetchContractMapEntry;
//# sourceMappingURL=fetch.js.map